# Why hibernate and JPA
- Establish a proven persistence arcitecture.
- Simplified data persistence.
- Imporved maintainability.
- Abstracts the underlying database.
- Strong following and community.
- Improve prodctivity.

# Hibernate
- Object Relational Mapping Framework that implements the Java Persistence API (JPA) specification.
- Automates the persistence of objects in Java applications to the tables in a relational database, using
metadata that determines the mapping between the objects and the database.
- Contain Hibernate Query Language (HQL) which is used to query entities.

# Object Relational Mapping
- Data Persistence : persistence refers to the charactristics of state that outlives the process that created it.
Without this capability, state would only exists in RAM, and would be lost when this RAM loses power, such as computer
shutdown.

# Relational databases
- Collective set of multiple data sets organized by tables records and columns.
- Records in table relate to one or many records in another table from functional dependencies established by keys.

# ORM
- Technique which uses metadata to connect object oriented code to a relational database.
- Reduces persistence code development time and maintanance.
- Bridges the gap between the data model and object model.
- Removes SQL from application logic, supporting dry principle

# Entities
@Entity
@Table
@Id
@GeneratedValue
@Column
@Transient
@Temporal

session = interface between hibernate and our app

hibernate.properties
hibernate.cfg.xml

# JPA Annotations
- Provides the standard API on which ORM vendors should based their implementation.
- Packaged in javax.persistence.

# HIbernate Annotations
- Provides features beyond those specified in JPA.
- Couples the application to ibernate.
- Package in org.hibernate.annotations.

# Types of Entity Associations
- One to One
    - One account is associated with one set of credentials
- One to Many
    - One account is associated with Many transactions
- Many to One
    - Many transactions are associated with one account
- Many to Many
    - Many users can be associated with many accounts

Unidirectional, Bidirectional

@OneToOne
@OneToMany
@ManyToOne
@ManyToMany

# Hibernate API
- Learn to invoke persistence manager methods that manage crud operations and transations.
- Understand the persistence lifecycle
- Become familiar with interfaces in the Hibernate API

# Entity States
- Transient - object constructed with the new operator that is not associated with any database row.
- Persistence - an entity instance associated with a database row and contained within a persistence context.
- Removed - an object scheduled for deletion
- Detached

# Persistence Context
- Cache all persistent entity instances
- Corresponds with a session

# Building a Persistence Layer
public interface Dao<T,ID> {
    public T findById(ID id);
    public List<T> findAll();
    public T save(T entity);
    publc void delete(T entity);
    public void flush();
    public void clear();
    public void setSession(Session session);
}

public class AbstractDao<T, ID extends Serializable> implements Dao<T, ID> {

}


